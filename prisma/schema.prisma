// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model for authentication and profiles
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  avatar        String?   // Path or URL to the user's avatar image
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)

  // Relations
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  comments      Comment[]
  auditLogs     AuditLog[]
  reviewReactions ReviewReaction[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

// Email verification and password reset tokens
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  token     String   @unique
  expires   DateTime

  @@index([userId])
  @@map("password_reset_tokens")
}

// NextAuth models for authentication
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Content models
enum ContentType {
  MOVIE
  TV_SHOW
  KIDS
}

model Content {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  tmdbId          Int
  title           String
  overview        String
  posterPath      String?
  backdropPath    String?
  releaseDate     DateTime?
  contentType     ContentType
  // genres many-to-many removed for MongoDB; use explicit join model ContentGenre
  wokeScore       Float       @default(0)
  reviewCount     Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  reviews         Review[]
  comments        Comment[]
  categoryScores  CategoryScore[]
  contentGenres   ContentGenre[]

  @@unique([tmdbId, contentType])
  @@map("contents")
}

model Genre {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  contentGenres ContentGenre[]

  @@map("genres")
}

// Rating categories for wokeness
model Category {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String          @unique
  description String?
  createdAt   DateTime        @default(now())

  // Relations
  reviews     ReviewCategory[]
  scores      CategoryScore[]

  @@map("categories")
}

// Aggregated category scores for content
model CategoryScore {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId   String
  categoryId  String
  score       Float    @default(0)
  count       Int      @default(0)
  percentage  Float    @default(0) // Percentage contribution to overall wokeness

  // Relations
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([contentId, categoryId])
  @@map("category_scores")
}

// User reviews
model Review {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?         // Now optional for guest reviews
  guestName   String?         // Name for anonymous reviews
  contentId   String
  rating      Int             @default(0) // 1-10 scale
  text        String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  user        User?           @relation(fields: [userId], references: [id], onDelete: Cascade) // Now optional
  content     Content         @relation(fields: [contentId], references: [id], onDelete: Cascade)
  categories  ReviewCategory[]
  reactions   ReviewReaction[]

  @@map("reviews")
}

// Junction table for reviews and categories
model ReviewCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewId    String
  categoryId  String

  // Relations
  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([reviewId, categoryId])
  @@map("review_categories")
}

// Forum comments
// Admin audit log for tracking admin actions
model AuditLog {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  adminId     String    @db.ObjectId
  action      String    // e.g., BAN_USER, DELETE_REVIEW, etc.
  targetId    String    // ID of the affected entity
  targetType  String    // e.g., User, Review, etc.
  details     String?   // Additional context
  createdAt   DateTime  @default(now())
  
  // Relations
  admin       User      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  userId      String
  contentId   String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     Content?  @relation(fields: [contentId], references: [id], onDelete: SetNull)
  parent      Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[] @relation("CommentToComment")

  @@map("comments")
}

// Explicit join model for Content-Genre many-to-many
model ContentGenre {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId String
  genreId   String

  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([contentId, genreId])
  @@map("content_genres")
}

// Review reactions (likes/dislikes)
model ReviewReaction {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        String    // 'like' or 'dislike'
  userId      String
  reviewId    String
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  review      Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  @@unique([userId, reviewId])
  @@map("review_reactions")
}

// Forum threads for general discussion
model ForumThread {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("forum_threads")
}
